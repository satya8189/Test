package com.wre.model;

//Generated 13 Jun, 2016 3:48:00 PM by Hibernate Tools 4.3.1


import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;

import static javax.persistence.GenerationType.IDENTITY;

import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import com.wre.common.util.WREConstants;

/**
* Event generated by hbm2java
*/
@Entity
@Table(name="event",catalog=WREConstants.CATALOG)
public class Event  implements java.io.Serializable {


  private Long eventId;
  private Client client;
  private User user;
  private String eventAddress;
  private String eventAgenda;
  private Date eventDate;
  private String eventDesc;
  private String eventName;
  private String eventTime;
  private String status;
  private Set<Agenda> agendas = new HashSet<Agenda>(0);
  private Set<Speaker> speakers = new HashSet<Speaker>(0);
  private Set<EventServices> eventServiceses = new HashSet<EventServices>(0);
  private Set<SurveyQuestion> surveyQuestions = new HashSet<SurveyQuestion>(0);
  private Set<Galary> galaries = new HashSet<Galary>(0);
  private Set<SocialMedia> socialMedias = new HashSet<SocialMedia>(0);
  private Set<SurveyQuestionAnswer> surveyQuestionAnswers = new HashSet<SurveyQuestionAnswer>(0);
  private Set<ContactDetails> contactDetailses = new HashSet<ContactDetails>(0);
  private Set<Newsfeed> newsfeeds = new HashSet<Newsfeed>(0);
  private Set<Sponcor> sponcors = new HashSet<Sponcor>(0);
  private Set<EventParticipant> eventParticipants = new HashSet<EventParticipant>(0);
  private Set<QuestionAnswer> questionAnswers = new HashSet<QuestionAnswer>(0);
  private Set<Message> messages = new HashSet<Message>(0);
  private Set<ChatTopic> chatTopics = new HashSet<ChatTopic>(0);

 public Event() {
 }

 public Event(Client client, User user, String eventAddress, String eventAgenda, Date eventDate, String eventDesc, String eventName, String eventTime, String status, Set<Agenda> agendas, Set<Speaker> speakers, Set<EventServices> eventServiceses, Set<SurveyQuestion> surveyQuestions, Set<Galary> galaries, Set<SocialMedia> socialMedias, Set<SurveyQuestionAnswer> surveyQuestionAnswers, Set<ContactDetails> contactDetailses, Set<Newsfeed> newsfeeds, Set<Sponcor> sponcors, Set<EventParticipant> eventParticipants, Set<QuestionAnswer> questionAnswers, Set<Message> messages, Set<ChatTopic> chatTopics) {
    this.client = client;
    this.user = user;
    this.eventAddress = eventAddress;
    this.eventAgenda = eventAgenda;
    this.eventDate = eventDate;
    this.eventDesc = eventDesc;
    this.eventName = eventName;
    this.eventTime = eventTime;
    this.status = status;
    this.agendas = agendas;
    this.speakers = speakers;
    this.eventServiceses = eventServiceses;
    this.surveyQuestions = surveyQuestions;
    this.galaries = galaries;
    this.socialMedias = socialMedias;
    this.surveyQuestionAnswers = surveyQuestionAnswers;
    this.contactDetailses = contactDetailses;
    this.newsfeeds = newsfeeds;
    this.sponcors = sponcors;
    this.eventParticipants = eventParticipants;
    this.questionAnswers = questionAnswers;
    this.messages = messages;
    this.chatTopics = chatTopics;
 }

  @Id @GeneratedValue(strategy=IDENTITY)

 
 @Column(name="Event_ID", unique=true, nullable=false)
 public Long getEventId() {
     return this.eventId;
 }
 
 public void setEventId(Long eventId) {
     this.eventId = eventId;
 }

@ManyToOne(fetch=FetchType.LAZY)
 @JoinColumn(name="Client_ID")
 public Client getClient() {
     return this.client;
 }
 
 public void setClient(Client client) {
     this.client = client;
 }

@ManyToOne(fetch=FetchType.LAZY)
 @JoinColumn(name="User_ID")
 public User getUser() {
     return this.user;
 }
 
 public void setUser(User user) {
     this.user = user;
 }

 
 @Column(name="Event_Address", length=100)
 public String getEventAddress() {
     return this.eventAddress;
 }
 
 public void setEventAddress(String eventAddress) {
     this.eventAddress = eventAddress;
 }

 
 @Column(name="Event_Agenda")
 public String getEventAgenda() {
     return this.eventAgenda;
 }
 
 public void setEventAgenda(String eventAgenda) {
     this.eventAgenda = eventAgenda;
 }

 @Temporal(TemporalType.DATE)
 @Column(name="Event_Date", length=10)
 public Date getEventDate() {
     return this.eventDate;
 }
 
 public void setEventDate(Date eventDate) {
     this.eventDate = eventDate;
 }

 
 @Column(name="Event_Desc")
 public String getEventDesc() {
     return this.eventDesc;
 }
 
 public void setEventDesc(String eventDesc) {
     this.eventDesc = eventDesc;
 }

 
 @Column(name="Event_Name", length=200)
 public String getEventName() {
     return this.eventName;
 }
 
 public void setEventName(String eventName) {
     this.eventName = eventName;
 }

 
 @Column(name="Event_Time", length=50)
 public String getEventTime() {
     return this.eventTime;
 }
 
 public void setEventTime(String eventTime) {
     this.eventTime = eventTime;
 }

 
 @Column(name="Status", length=20)
 public String getStatus() {
     return this.status;
 }
 
 public void setStatus(String status) {
     this.status = status;
 }

@OneToMany(fetch=FetchType.LAZY, mappedBy="event")
 public Set<Agenda> getAgendas() {
     return this.agendas;
 }
 
 public void setAgendas(Set<Agenda> agendas) {
     this.agendas = agendas;
 }

@OneToMany(fetch=FetchType.LAZY, mappedBy="event")
 public Set<Speaker> getSpeakers() {
     return this.speakers;
 }
 
 public void setSpeakers(Set<Speaker> speakers) {
     this.speakers = speakers;
 }

@OneToMany(fetch=FetchType.LAZY, mappedBy="event")
 public Set<EventServices> getEventServiceses() {
     return this.eventServiceses;
 }
 
 public void setEventServiceses(Set<EventServices> eventServiceses) {
     this.eventServiceses = eventServiceses;
 }

@OneToMany(fetch=FetchType.LAZY, mappedBy="event")
 public Set<SurveyQuestion> getSurveyQuestions() {
     return this.surveyQuestions;
 }
 
 public void setSurveyQuestions(Set<SurveyQuestion> surveyQuestions) {
     this.surveyQuestions = surveyQuestions;
 }

@OneToMany(fetch=FetchType.LAZY, mappedBy="event")
 public Set<Galary> getGalaries() {
     return this.galaries;
 }
 
 public void setGalaries(Set<Galary> galaries) {
     this.galaries = galaries;
 }

@OneToMany(fetch=FetchType.LAZY, mappedBy="event")
 public Set<SocialMedia> getSocialMedias() {
     return this.socialMedias;
 }
 
 public void setSocialMedias(Set<SocialMedia> socialMedias) {
     this.socialMedias = socialMedias;
 }

@OneToMany(fetch=FetchType.LAZY, mappedBy="event")
 public Set<SurveyQuestionAnswer> getSurveyQuestionAnswers() {
     return this.surveyQuestionAnswers;
 }
 
 public void setSurveyQuestionAnswers(Set<SurveyQuestionAnswer> surveyQuestionAnswers) {
     this.surveyQuestionAnswers = surveyQuestionAnswers;
 }

@OneToMany(fetch=FetchType.LAZY, mappedBy="event")
 public Set<ContactDetails> getContactDetailses() {
     return this.contactDetailses;
 }
 
 public void setContactDetailses(Set<ContactDetails> contactDetailses) {
     this.contactDetailses = contactDetailses;
 }

@OneToMany(fetch=FetchType.LAZY, mappedBy="event")
 public Set<Newsfeed> getNewsfeeds() {
     return this.newsfeeds;
 }
 
 public void setNewsfeeds(Set<Newsfeed> newsfeeds) {
     this.newsfeeds = newsfeeds;
 }

@OneToMany(fetch=FetchType.LAZY, mappedBy="event")
 public Set<Sponcor> getSponcors() {
     return this.sponcors;
 }
 
 public void setSponcors(Set<Sponcor> sponcors) {
     this.sponcors = sponcors;
 }

@OneToMany(fetch=FetchType.LAZY, mappedBy="event")
 public Set<EventParticipant> getEventParticipants() {
     return this.eventParticipants;
 }
 
 public void setEventParticipants(Set<EventParticipant> eventParticipants) {
     this.eventParticipants = eventParticipants;
 }

@OneToMany(fetch=FetchType.LAZY, mappedBy="event")
 public Set<QuestionAnswer> getQuestionAnswers() {
     return this.questionAnswers;
 }
 
 public void setQuestionAnswers(Set<QuestionAnswer> questionAnswers) {
     this.questionAnswers = questionAnswers;
 }

@OneToMany(fetch=FetchType.LAZY, mappedBy="event")
 public Set<Message> getMessages() {
     return this.messages;
 }
 
 public void setMessages(Set<Message> messages) {
     this.messages = messages;
 }

@OneToMany(fetch=FetchType.LAZY, mappedBy="event")
 public Set<ChatTopic> getChatTopics() {
     return this.chatTopics;
 }
 
 public void setChatTopics(Set<ChatTopic> chatTopics) {
     this.chatTopics = chatTopics;
 }




}